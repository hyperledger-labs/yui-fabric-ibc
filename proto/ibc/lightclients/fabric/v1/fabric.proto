syntax = "proto3";
package ibc.lightclients.fabric.v1;

import "gogoproto/gogo.proto";
import "commitment/types.proto";

option go_package = "github.com/hyperledger-labs/yui-fabric-ibc/light-client/types";
option (gogoproto.goproto_getters_all)  = false;

message ClientState {
  string id = 1;
  ChaincodeHeader last_chaincode_header = 2 [(gogoproto.nullable) = false];
  ChaincodeInfo last_chaincode_info = 3 [(gogoproto.nullable) = false];
  MSPInfos last_msp_infos = 4 [(gogoproto.nullable) = false];
}

message ConsensusState {
  int64 timestamp = 1;
}

message Header {
  ChaincodeHeader  ChaincodeHeader = 1 [(gogoproto.nullable) = true];
  ChaincodeInfo    ChaincodeInfo   = 2 [(gogoproto.nullable) = true];
  MSPHeaders       MSPHeaders      = 3 [(gogoproto.nullable) = true];
}
  
message ChaincodeHeader {
  commitment.Sequence         sequence   = 1 [(gogoproto.nullable) = false];
  CommitmentProof  proof      = 2 [(gogoproto.nullable) = false];
}

message ChaincodeInfo {
  string         channel_id         = 1;
  ChaincodeID    chaincode_id       = 2 [(gogoproto.nullable) = false];
  bytes          endorsement_policy = 3;
  bytes          ibc_policy         = 4;
  MessageProof   proof              = 5;
}
  
message MSPHeaders {
  repeated MSPHeader headers = 1 [(gogoproto.nullable) = false];
}
  
message MSPHeader {
  MSPHeaderType type   = 1;
  string        msp_id = 2 [(gogoproto.customname) = "MSPID"];
  bytes         config = 3;
  bytes         policy = 4;
  MessageProof  proof  = 5;
}
  
enum MSPHeaderType {
  option (gogoproto.goproto_enum_prefix) = false;

  MSP_HEADER_TYPE_CREATE        = 0 [(gogoproto.enumvalue_customname) = "MSPHeaderTypeCreate"];
  MSP_HEADER_TYPE_UPDATE_POLICY = 1 [(gogoproto.enumvalue_customname) = "MSPHeaderTypeUpdatePolicy"];
  MSP_HEADER_TYPE_UPDATE_CONFIG = 2 [(gogoproto.enumvalue_customname) = "MSPHeaderTypeUpdateConfig"];
  MSP_HEADER_TYPE_FREEZE        = 3 [(gogoproto.enumvalue_customname) = "MSPHeaderTypeFreeze"];
}

message MSPInfos {
  repeated MSPInfo infos = 1 [(gogoproto.nullable) = false];
}

message MSPInfo {
  string        msp_id  = 1 [(gogoproto.customname) = "MSPID"];
  bytes         config  = 2;
  bytes         policy  = 3;
  bool          freezed = 4;
}

// ref. https://github.com/hyperledger/fabric-chaincode-java/blob/392cf9cb740c42e0376ecdbbb015285b5a74ba97/fabric-chaincode-protos/src/main/protos/peer/chaincode.proto#L21
message ChaincodeID {
  //deploy transaction will use the path
  string path = 1;

  //all other requests will use the name (really a hashcode) generated by
  //the deploy transaction
  string name = 2;

  //user friendly version name for the chaincode
  string version = 3;
}

message Prefix {
  bytes value = 1 [(gogoproto.moretags) = "yaml:\"value\""];
}

message CommitmentProof {
  option (gogoproto.equal) = true;

  bytes proposal = 1;
  uint32 ns_index = 2;
  uint32 write_set_index = 3;
  repeated bytes identities = 4;
  repeated bytes signatures = 5;
}

message MessageProof {
  option (gogoproto.equal) = true;

  repeated bytes identities = 1;
  repeated bytes signatures = 2;
}
